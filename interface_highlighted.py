
import re

import gradio as gr
import numpy as np
import matplotlib as mpl

from settings import settings
from svm_baseline import load_model, get_coefficients


MODEL = load_model(path=settings.SVM_BASELINE_PATH)
COEFS = get_coefficients(MODEL, top_k=settings.COEF_MAX_TOP_K)


def AI_score(text):
    _, ai_score = MODEL.predict_proba([text])[0]
    return ai_score


def find_cutoff(score, cutoffs):
    for idx, cutoff in enumerate(cutoffs):
        if score <= cutoff:
            return idx
    return len(cutoffs)


def get_suspect_tokens(text):
    TOKEN_RE = re.compile(r'[a-zA-Z]+')
    output = []
    last = 0
    for match in TOKEN_RE.finditer(text):
        start, end = match.span()
        # append interim
        if last != start != 0:
            output.append((text[last:start], None))
        # find feature
        word = text[start:end]
        score = COEFS.get(word, 0.0)
        score = None if score == 0.0 else score
        output.append((text[start:end], score))
        last = end
    # trailing text
    if last != len(text):
        output.append((text[last:], None))
    return output


def on_click(text):
    return round(AI_score(text), 4), get_suspect_tokens(text)


with gr.Blocks(title="AI Detection Service") as demo:
    gr.Markdown(
        """
        # AI Detection Service

        This web provides an inference service to detect texts that are suspect to have been generated using a Large Language Model like OpenAI's ChatGPT.


        Copy the text to the input field below and click on the "Score" button on the right to obtain a confidence score that the text has been generated by an AI.
        """
    )
    with gr.Row():
        with gr.Column(scale=4):
            input_text = gr.Textbox(label="Input Text", placeholder="Enter your text here...")
        with gr.Column(variant="panel", scale=1, min_width=50):
            score_btn = gr.Button("Score")
            output_score = gr.Text(label="Confidence", interactive=False)
        with gr.Column(scale=4):
            highlighted_text = gr.HighlightedText(label="Analysis", show_legend=True, combine_adjacent=True, container=False)

        score_btn.click(fn=on_click, inputs=input_text, outputs=[output_score, highlighted_text])


if __name__ == '__main__':
    demo.launch()


import gradio as gr
from gradio_rich_textbox import RichTextbox

from .models import MODEL
from .settings import settings


DETECT_LANGUAGE = "Detect Language"


def score_label(score):
    def score_label_(score):
        for prob_range in sorted(settings.PROBABILITY_RANGES, reverse=True, key=lambda it: it.cutoff):
            if score >= prob_range.cutoff:
                return prob_range.label

        return prob_range.label

    return f"Input [b]{score_label_(score)}[/b] generated by an LLM."


def format_score(score):
    output_score = (2 * score) - 1 # move to (-1, 1) range
    if score < 0.5:
        output_score = -output_score
    return round(output_score * 100, 2)


def on_click(text, detect_language, detected_language):
    if detect_language == DETECT_LANGUAGE:
        output = MODEL.score(text)
        score, detected_language = output['score'], output['language']
        sent_scores = MODEL.score_sentences(text)['score']
    else:
        score = MODEL.score(text, language=detect_language.lower())['score']
        sent_scores = MODEL.score_sentences(text, language=detect_language.lower())['score']
        detected_language = None
    return format_score(score), score_label(score), sent_scores, detected_language


with gr.Blocks(title="DETECTUA") as demo:
    gr.Markdown(
        """
        # DETECTUA: TextUA's AI Detection Service

        This web provides an inference service to detect texts that are suspect to have been 
        generated using a Large Language Model like OpenAI's ChatGPT.

        Copy the text to the input field below and click on the "Score" button on the right 
        to obtain a probabilty score that the text has been generated by an AI.
        """)

    detected_language = gr.State(None)

    with gr.Row():
        with gr.Column(scale=4):
            input_text = gr.Textbox(label="Input Text", placeholder="Enter your text here...")

        with gr.Column(variant="panel", scale=2, min_width=100):
            score_btn = gr.Button("Score")
            language_dropdown = gr.Dropdown(
                [DETECT_LANGUAGE] + list(settings.LANGUAGES.keys()),
                label="Input Language",
                value=DETECT_LANGUAGE,
                interactive=True)

            output_label = RichTextbox(label="Result", interactive=False, visible=len(settings.PROBABILITY_RANGES) > 0)
            output_score = gr.Textbox(label="Score", interactive=False)

            @gr.render(inputs=detected_language)
            def render_detected_language(detected_language):
                gr.Textbox(detected_language, label="Detected Language",
                           interactive=False, visible=detected_language != None)

        with gr.Column(scale=4):
            highlighted_text = gr.HighlightedText(
                label="Analysis",
                show_legend=True, combine_adjacent=True, container=False)

        score_btn.click(fn=on_click, 
                        inputs=[input_text, language_dropdown, detected_language],
                        outputs=[output_score, output_label, highlighted_text, detected_language])


if __name__ == '__main__':
    from .text_models import TEXT_MODEL

    MODEL.load()
    TEXT_MODEL.load()

    demo.launch()


import numpy as np
import gradio as gr

from .settings import settings


def nonlinear(x, a, b):
    return x / (a*(b-x)+b)


def on_click(text, model):
    score, sent_scores = model.score(
        text, return_token_scores=True, split_sentences=True)

    output = []
    for sent in sent_scores:
        tokens, scores = zip(*sent)
        if settings.USE_CUE_WORDS:
            is_cue = np.array(list(filter(None, scores)))
            # just proportion of words in each class
            prop = is_cue.sum() / len(is_cue)
            # apply nonlinear transform
            prop = -nonlinear(-prop, 0.8, 1) if prop < 0 else nonlinear(prop, 0.8, 1)
            output.append((''.join(tokens), prop))
        else:
            for token, token_score in zip(tokens, scores):
                output.append((token, token_score))
    
    return round(score, 4), output


with gr.Blocks(title="AI Detection Service") as demo:
    gr.Markdown(
        """
        # AI Detection Service

        This web provides an inference service to detect texts that are suspect to have been 
        generated using a Large Language Model like OpenAI's ChatGPT.

        Copy the text to the input field below and click on the "Score" button on the right 
        to obtain a confidence score that the text has been generated by an AI.
        """
    )
    with gr.Row():
        with gr.Column(scale=4):
            input_text = gr.Textbox(label="Input Text", placeholder="Enter your text here...")
        with gr.Column(variant="panel", scale=1, min_width=50):
            score_btn = gr.Button("Score")
            output_score = gr.Text(label="Confidence", interactive=False)
        with gr.Column(scale=4):
            highlighted_text = gr.HighlightedText(
                label="Analysis",
                show_legend=True, combine_adjacent=True, container=False)
            
        def on_click_(text):
            print("highlight", dir(demo.app.state))
            return on_click(text, demo.app.state.model)

        score_btn.click(fn=on_click_, inputs=input_text, outputs=[output_score, highlighted_text])


if __name__ == '__main__':
    demo.launch()
